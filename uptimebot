#!/bin/sh

#############################################################################
# Version 1.4.1-RELEASE (01-02-2022)
#############################################################################

#############################################################################
# Copyright 2021-2023 Nozel/Sebas Veeke. Licenced under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License.
#
# See https://creativecommons.org/licenses/by-nc-sa/4.0/
#
# Contact:
# > e-mail      mail@nozel.org
# > GitHub      nozel-org
#############################################################################

#############################################################################
# VARIABLES
#############################################################################

# uptimebot version
UPTIMEBOT_VERSION='1.4.1'

# check whether uptimebot.conf is available and source it
if [ -f /usr/local/etc/uptimebot/uptimebot.conf ]; then
    # populate all usable variables to have defaults and check validity later on
    UPTIMEBOT_LOG='0'
    UPTIMEBOT_DATABASE='0'
    UPTIMEBOT_DELAY='0'
    UPTIMEBOT_TLS_ALERT='0'
    PING_LOG='0'
    PING_TELEGRAM='0'
    PORT_LOG='0'
    PORT_TELEGRAM='0'
    HTTP_LOG='0'
    HTTP_TELEGRAM='0'
    DNS_LOG='0'
    DNS_TELEGRAM='0'
    TLS_LOG='0'
    TLS_TELEGRAM='0'
    TOR_LOG='0'
    TOR_TELEGRAM='0'
    ALL_LOG='0'
    ALL_TELEGRAM='0'
    TELEGRAM_TOKEN='0'
    TELEGRAM_CHAT='0'

    # and source backupbot.conf
    . /usr/local/etc/uptimebot/uptimebot.conf

    # populate required variables when they are not set
    if [ "${UPTIMEBOT_LOG}" = '0' ]; then
        UPTIMEBOT_LOG="/var/log/uptimebot.log"
    fi
    if [ "${UPTIMEBOT_DATABASE}" = '0' ]; then
        UPTIMEBOT_DATABASE="/usr/local/etc/uptimebot/targets.conf"
    fi
    if [ "${UPTIMEBOT_DELAY}" = '0' ]; then
        UPTIMEBOT_DELAY='0.5'
    fi
    if [ "${UPTIMEBOT_TLS_ALERT}" = '0' ]; then
        UPTIMEBOT_TLS_ALERT='7'
    fi
    if [ "${PING_LOG}" = '0' ]; then
        PING_LOG='NO'
    fi
    if [ "${PING_TELEGRAM}" = '0' ]; then
        PING_TELEGRAM='NO'
    fi
    if [ "${PORT_LOG}" = '0' ]; then
        PORT_LOG='NO'
    fi
    if [ "${PORT_TELEGRAM}" = '0' ]; then
        PORT_TELEGRAM='NO'
    fi
    if [ "${HTTP_LOG}" = '0' ]; then
        HTTP_LOG='NO'
    fi
    if [ "${HTTP_TELEGRAM}" = '0' ]; then
        HTTP_TELEGRAM='NO'
    fi
    if [ "${DNS_LOG}" = '0' ]; then
        DNS_LOG='NO'
    fi
    if [ "${DNS_TELEGRAM}" = '0' ]; then
        DNS_TELEGRAM='NO'
    fi
    if [ "${TLS_LOG}" = '0' ]; then
        TLS_LOG='NO'
    fi
    if [ "${TLS_TELEGRAM}" = '0' ]; then
        TLS_TELEGRAM='NO'
    fi
    if [ "${TOR_LOG}" = '0' ]; then
        TOR_LOG='NO'
    fi
    if [ "${TOR_TELEGRAM}" = '0' ]; then
        TOR_TELEGRAM='NO'
    fi
    if [ "${ALL_LOG}" = '0' ]; then
        ALL_LOG='NO'
    fi
    if [ "${ALL_TELEGRAM}" = '0' ]; then
        ALL_TELEGRAM='NO'
    fi
    if [ "${TELEGRAM_TOKEN}" = '0' ] || [ "${TELEGRAM_CHAT}" = '0' ]; then
        METHOD_TELEGRAM='0'
    else
        METHOD_TELEGRAM='1'
    fi
else
    UPTIMEBOT_LOG="/var/log/uptimebot.log"
    UPTIMEBOT_DATABASE='/usr/local/etc/uptimebot/targets.conf'
    UPTIMEBOT_DELAY='0.5'
fi

####################################################################################################
# ARGUMENT HANDLING
####################################################################################################

# populate validation variables with zeros for validation
ARGUMENT_OPTION='0'
ARGUMENT_FEATURE='0'
ARGUMENT_METHOD='0'
ARGUMENT_VERSION='0'
ARGUMENT_HELP='0'
ARGUMENT_CHECK='0'
ARGUMENT_CRON='0'
ARGUMENT_PING='0'
ARGUMENT_PORT='0'
ARGUMENT_HTTP='0'
ARGUMENT_DNS='0'
ARGUMENT_TLS='0'
ARGUMENT_TOR='0'
ARGUMENT_ALL='0'
ARGUMENT_LIST='0'
ARGUMENT_LOG='0'
ARGUMENT_CLI='0'
ARGUMENT_TELEGRAM='0'

# watch arguments
while test -n "$1"; do
    case "$1" in
        # options
        --version|-version|version|--v|-v|v)
            ARGUMENT_VERSION='1'
            ARGUMENT_OPTION='1'
            shift
            ;;

        --help|-help|help|--h|-h|h)
            ARGUMENT_HELP='1'
            ARGUMENT_OPTION='1'
            shift
            ;;

        --check|-check|check)
            ARGUMENT_CHECK='1'
            ARGUMENT_OPTION='1'
            shift
            ;;

        --cron|-cron|cron)
            ARGUMENT_CRON='1'
            ARGUMENT_OPTION='1'
            shift
            ;;

        # features
		--ping|ping)
			ARGUMENT_PING='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

        --port|port)
			ARGUMENT_PORT='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

		--http|http)
			ARGUMENT_HTTP='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

        --dns|dns)
            ARGUMENT_DNS='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

		--tls|tls)
			ARGUMENT_TLS='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

		--tor|tor)
			ARGUMENT_TOR='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

		--all|all)
			ARGUMENT_ALL='1'
            ARGUMENT_FEATURE='1'
            shift
            ;;

        # methods
		--list|list)
			ARGUMENT_LIST='1'
            ARGUMENT_METHOD='1'
            shift
            ;;

		--log|log|-l|l)
            ARGUMENT_LOG='1'
            ARGUMENT_METHOD='1'
            shift
            ;;

        --cli|cli|-c|c)
            ARGUMENT_CLI='1'
            ARGUMENT_METHOD='1'
            shift
            ;;

        --telegram|telegram|-t|t)
            ARGUMENT_TELEGRAM='1'
            ARGUMENT_METHOD='1'
            shift
            ;;

        # other
        *)
            ARGUMENT_NONE='1'
            shift
            ;;
    esac
done


####################################################################################################
# ERROR FUNCTIONS
####################################################################################################

error_curl_not_installed() {
    printf "uptimebot: curl not installed.\n"
    printf "use 'pkg install curl' or install curl from ports.\n"
    exit 1
}

error_invalid_argument() {
    printf "uptimebot: invalid argument used.\nUse 'uptimebot --help' for a list of valid arguments.\n"
    exit 1
}
error_more_than_one_feature() {
    printf "uptimebot: only one uptimebot feature can be used at a time.\nUse 'uptimebot --help' for a list of valid arguments.\n"
    exit 1
}

error_more_than_one_method() {
    printf "uptimebot: only one uptimebot method can be used at a time.\nUse 'uptimebot --help' for a list of valid arguments.\n"
    exit 1
}

error_method_not_supported() {
    printf "uptimebot: the chosen method isn't supported for the chosen feature.\n"
    exit 1
}

error_no_entries_found() {
	printf "uptimebot: no relevant entries found for this method.\n"
	exit 1
}

error_telegram_not_configured() {
    printf "uptimebot: Telegram is nog configured properly, can't use method Telegram.\n"
	exit 1
}

####################################################################################################
# REQUIREMENT FUNCTIONS
####################################################################################################

requirement_curl() {
    # show error when curl cannot be found (which probably means the user has not installed curl)
    if [ ! "$(command -v curl)" ]; then
        error_curl_not_installed
    fi
}

uptimebot_argument_validate() {
    # combine argument categories
    ARGUMENT_FEATURES_COMBINED="$((ARGUMENT_PING + ARGUMENT_PORT + ARGUMENT_HTTP + ARGUMENT_DNS + ARGUMENT_TLS + ARGUMENT_TOR + ARGUMENT_ALL))"
    ARGUMENT_METHOD_COMBINED="$((ARGUMENT_LIST + ARGUMENT_LOG + ARGUMENT_CLI + ARGUMENT_TELEGRAM))"

    if [ "${ARGUMENT_NONE}" = '1' ]; then
        error_invalid_argument
    # validate amount of selected features and return error when more than 1 feature is selected
    elif [ "${ARGUMENT_FEATURES_COMBINED}" -gt '1' ]; then
        error_more_than_one_feature
    # validate amount of selected methods and return error when more than 1 feature is selected
    elif [ "${ARGUMENT_METHOD_COMBINED}" -gt '1' ]; then
        error_more_than_one_method
    fi
    # can't use telegram argument when telegram is not configured
    if [ "${ARGUMENT_TELEGRAM}" = '1' ] && [ "${METHOD_TELEGRAM}" = '0' ]; then
        error_telegram_not_configured
    fi
}

####################################################################################################
# GENERAL FUNCTIONS
####################################################################################################

option_version() {
    printf "Uptimebot %s\n" "${UPTIMEBOT_VERSION}"
    printf "Copyright (C) 2021-2022 Nozel.\n"
    printf "License CC Attribution-NonCommercial-ShareAlike 4.0 Int.\n\n"
    printf "Written by Sebas Veeke\n"

    # exit when done
    exit 0
}

option_help() {
    printf "Usage:\n"
    printf " uptimebot [feature]... [method]...\n"
    printf " uptimebot [option]...\n\n"
    printf "Features:\n"
    printf " --ping               	Monitor IP address status\n"
    printf " --port                 Monitor port status\n"
	printf " --http               	Monitor HTTP webserver status\n"
	printf " --dns               	Monitor DNS records status\n"
	printf " --tls               	Monitor expiration date for TLS certs\n"
	#printf " --tor               	Monitor Tor Relay availability\n"
	printf " --all               	Monitor all configured Features\n\n"
    printf "Methods:\n"
	printf " --list (default)       Output configured rules to cli\n"
	printf " --log                  Start monitoring and only output to log\n"
    printf " --cli                  Start monitoring and output to log and cli\n"
    printf " --telegram             Start monitoring and output to log and Telegram\n\n"
    printf "Options:\n"
    printf " --check                Checks monitoring target list for validity\n"
    printf " --cron                 Effectuate cron changes from uptimebot config\n"
    printf " --help                 Display this help and exit\n"
    printf " --version              Display version information and exit\n"

    # exit when done
    exit 0
}

option_check() {
    # PING checks amount of arguments and whether IP addresses are used
    # PORT checks amount of arguments and whether the port is a number
    # HTTP, DNS and TLS checks amount of arguments only

    DIVIDER="============================================================================="
    HEADER="\n %-5s %-5s %-8s %-8s %-36s\n"
    FORMAT=" %-5s %-5s %-8s %-8s %-36s\n"
    WIDTH="77"
    printf "${HEADER}" "CHECK" "LINE" "FEATURE" "STATUS" "ERROR"
    printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
    LINE_NUMBER='0'

    while read -r line; do
        LINE_NUMBER="$(( LINE_NUMBER + 1 ))"
        LINE_PREFACE="$(echo "${line}" | awk '{print $1;}')"
        if [ "${LINE_PREFACE}" = 'ping' ]; then
            if [ "$(echo "${line}" | wc -w)" -eq '2' ]; then
                if [ "$(echo "${line}" | awk '{print $2;}')" != "${1#*[0-9].[0-9]}" ] || [ "$(echo "${line}" | awk '{print $2;}')" != "${1#*:[0-9a-fA-F]}" ]; then
                    printf "${FORMAT}" "[i]" "${LINE_NUMBER}" "PING" "PASS" ""
                else
                    printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "PING" "ERROR" "NO VALID IP"
                fi
            else
                printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "PING" "ERROR" "Wrong amount of arguments"
            fi
        elif [ "${LINE_PREFACE}" = 'port4' ] || [ "${LINE_PREFACE}" = 'port6' ] || [ "${LINE_PREFACE}" = 'port4i' ] || [ "${LINE_PREFACE}" = 'port6i' ]; then
            if [ "$(echo "${line}" | wc -w)" -eq '3' ]; then
                if [ "$(echo "${line}" | awk '{print $3;}')" -eq "$(echo "${line}" | awk '{print $3;}')" ] 2> /dev/null ; then
                        printf "${FORMAT}" "[i]" "${LINE_NUMBER}" "PORT" "PASS" ""
                else
                        printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "PORT" "ERROR" "Port not recognized"
                fi
            else
                printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "PORT" "ERROR" "Wrong amount of arguments"
            fi
        elif [ "${LINE_PREFACE}" = 'http4' ] || [ "${LINE_PREFACE}" = 'http6' ] || [ "${LINE_PREFACE}" = 'https4' ] || [ "${LINE_PREFACE}" = 'https6' ]; then
            if [ "$(echo "${line}" | wc -w)" -eq '2' ]; then
                printf "${FORMAT}" "[i]" "${LINE_NUMBER}" "HTTP" "PASS" ""
            else
                printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "HTTP" "ERROR" "Wrong amount of arguments"
            fi
        elif [ "${LINE_PREFACE}" = 'a' ] || [ "${LINE_PREFACE}" = 'aaaa' ] || [ "${LINE_PREFACE}" = 'cname' ] || [ "${LINE_PREFACE}" = 'txt' ] || \
        [ "${LINE_PREFACE}" = 'mx' ] || [ "${LINE_PREFACE}" = 'ns' ] || [ "${LINE_PREFACE}" = 'soa' ] || [ "${LINE_PREFACE}" = 'ptr' ]; then
            if [ "$(echo "${line}" | wc -w)" -eq '3' ]; then
                printf "${FORMAT}" "[i]" "${LINE_NUMBER}" "DNS" "PASS" ""
            else
                printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "DNS" "ERROR" "Wrong amount of arguments"
            fi
        elif [ "${LINE_PREFACE}" = 'tls' ]; then
            if [ "$(echo "${line}" | wc -w)" -eq '2' ]; then
                printf "${FORMAT}" "[i]" "${LINE_NUMBER}" "TLS" "PASS" ""
            else
                printf "${FORMAT}" "[!]" "${LINE_NUMBER}" "TLS" "ERROR" "Wrong amount of arguments"
            fi
        fi
    done < ${UPTIMEBOT_DATABASE}
}

option_cron() {
    printf "[1] Removing old uptimebot cronjob\n"
    rm -f /etc/cron.d/uptimebot

    if [ "${PING_LOG}" = 'NO' ] && [ "${PING_TELEGRAM}" = 'NO' ] && \
    [ "${PORT_LOG}" = 'NO' ] && [ "${PORT_TELEGRAM}" = 'NO' ] && \
    [ "${HTTP_LOG}" = 'NO' ] && [ "${HTTP_TELEGRAM}" = 'NO' ] && \
    [ "${DNS_LOG}" = 'NO' ] && [ "${DNS_TELEGRAM}" = 'NO' ] && \
    [ "${TLS_LOG}" = 'NO' ] && [ "${TLS_TELEGRAM}" = 'NO' ] && \
    [ "${TOR_LOG}" = 'NO' ] && [ "${TOR_TELEGRAM}" = 'NO' ] && \
    [ "${ALL_LOG}" = 'NO' ] && [ "${ALL_TELEGRAM}" = 'NO' ]; then
        printf "[2] No automated tasks to add.\n"
        printf "All done!\n"
    else
        printf "[2] Adding configured automated tasks for:\n"
        if [ "${PING_TELEGRAM}" = 'YES' ]; then
            printf "  - ping to Telegram on cron schedule %s\n" "${PING_CRON}"
            printf "%s root /usr/local/bin/uptimebot --ping --telegram\n" "${PING_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${PING_LOG}" = 'YES' ]; then
            printf "  - ping to log on cron schedule %s\n" "${PING_CRON}"
            printf "%s root /usr/local/bin/uptimebot --ping --log\n" "${PING_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${PORT_TELEGRAM}" = 'YES' ]; then
            printf "  - port to Telegram on cron schedule %s\n" "${PORT_CRON}"
            printf "%s root /usr/local/bin/uptimebot --port --telegram\n" "${PORT_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${PORT_LOG}" = 'YES' ]; then
            printf "  - port to log on cron schedule %s\n" "${PORT_CRON}"
            printf "%s root /usr/local/bin/uptimebot --port --log\n" "${PORT_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${HTTP_TELEGRAM}" = 'YES' ]; then
            printf "  - HTTP to Telegram on cron schedule %s\n" "${HTTP_CRON}"
            printf "%s root /usr/local/bin/uptimebot --http --telegram\n" "${HTTP_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${HTTP_LOG}" = 'YES' ]; then
            printf "  - HTTP to log on cron schedule %s\n" "${HTTP_CRON}"
            printf "%s root /usr/local/bin/uptimebot --http --log\n" "${HTTP_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${DNS_TELEGRAM}" = 'YES' ]; then
            printf "  - DNS to Telegram on cron schedule %s\n" "${DNS_CRON}"
            printf "%s root /usr/local/bin/uptimebot --dns --telegram\n" "${DNS_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${DNS_LOG}" = 'YES' ]; then
            printf "  - DNS to log on cron schedule %s\n" "${DNS_CRON}"
            printf "%s root /usr/local/bin/uptimebot --dns --log\n" "${DNS_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${TLS_TELEGRAM}" = 'YES' ]; then
            printf "  - TLS to Telegram on cron schedule %s\n" "${TLS_CRON}"
            printf "%s root /usr/local/bin/uptimebot --tls --telegram\n" "${TLS_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${TLS_LOG}" = 'YES' ]; then
            printf "  - TLS to log on cron schedule %s\n" "${TLS_CRON}"
            printf "%s root /usr/local/bin/uptimebot --tls --log\n" "${TLS_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${TOR_TELEGRAM}" = 'YES' ]; then
            printf "  - TOR to Telegram on cron schedule %s\n" "${TOR_CRON}"
            printf "%s root /usr/local/bin/uptimebot --tor --telegram\n" "${TOR_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${TOR_LOG}" = 'YES' ]; then
            printf "  - TOR to log on cron schedule %s\n" "${TOR_CRON}"
            printf "%s root /usr/local/bin/uptimebot --tor --log\n" "${TOR_CRON}" >> /etc/cron.d/uptimebot
        fi
        if [ "${ALL_TELEGRAM}" = 'YES' ]; then
            printf "  - ALL to Telegram on cron schedule %s\n" "${ALL_CRON}"
            printf "%s root /usr/local/bin/uptimebot --all --telegram\n" "${ALL_CRON}" >> /etc/cron.d/uptimebot
        elif [ "${ALL_LOG}" = 'YES' ]; then
            printf "  - ALL to log on cron schedule %s\n" "${ALL_CRON}"
            printf "%s root /usr/local/bin/uptimebot --all --logon\n" "${ALL_CRON}" >> /etc/cron.d/uptimebot
        fi
        printf "All done! Your new schedule can be found in /etc/cron.d/uptimebot.\n"
    fi

    # exit when done
    exit 0
}

####################################################################################################
# SUPPORT FUNCTIONS
####################################################################################################

slow_down() {
    sleep "${UPTIMEBOT_DELAY}"
}
check_ip_version() {
    if [ "${1}" != "${1#*[0-9].[0-9]}" ]; then
  		IP_VERSION='4'
	elif [ "${1}" != "${1#*:[0-9a-fA-F]}" ]; then
  		IP_VERSION='6'
	else
  		printf "uptimebot: error: IP address not recognized.\n"
	fi
}

send_error_to_log() {
    DATE="$(date +%Y-%m-%d)"
    TIME="$(date +%H:%M:%S)"
    printf "[%s][%s][ERROR]%s %s %s\n" "${DATE}" "${TIME}" "${1}" "${2}" "${3}" >> ${UPTIMEBOT_LOG}
}

send_error_to_telegram() {
    CURRENT_FEATURE="$(echo "${line}" | awk '{print $1;}')"
    if [ "${CURRENT_FEATURE}" = 'ping' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'port4' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'port6' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'http4' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'http6' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'https4' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'https6' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    elif [ "${CURRENT_FEATURE}" = 'a' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'aaaa' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'cname' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'txt' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'mx' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'ns' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'soa' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'ptr' ]; then
        TELEGRAM_EMOJI='%e2%9a%a0'
    elif [ "${CURRENT_FEATURE}" = 'tls' ]; then
        TELEGRAM_EMOJI='%e2%8f%b1'
    elif [ "${CURRENT_FEATURE}" = 'tor' ]; then
        TELEGRAM_EMOJI='%f0%9f%94%a5'
    fi
    TELEGRAM_MESSAGE="$(echo -e "${TELEGRAM_EMOJI} <b>${1}</b>\n${2} ${3}")"
    method_telegram
}

####################################################################################################
# FEATURE FUNCTIONS
####################################################################################################


feature_ping_list() {
	PROTOCOL_PING='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ping' ]; then
            PROTOCOL_PING='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_PING}" -eq '1' ]; then
        DIVIDER="============================================================================="
		HEADER="\n %-5s %-8s %-36s\n"
        FORMAT=" %-5s %-8s %-36s\n"
        WIDTH="77"
        printf "${HEADER}" "PING" "IP" "IP ADDRESS"
        printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'ping' ]; then
                IP_ADDRESS="$(echo "${line}" | awk '{print $2;}')"
				check_ip_version "${IP_ADDRESS}"
                printf "${FORMAT}" "[*]" "IPv${IP_VERSION}" "${IP_ADDRESS}"
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_port_list() {
    PROTOCOL_PORT4='0'
    PROTOCOL_PORT6='0'
    PROTOCOL_PORT4_INVERSE='0'
    PROTOCOL_PORT6_INVERSE='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4' ]; then
            PROTOCOL_PORT4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6' ]; then
            PROTOCOL_PORT6='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4i' ]; then
            PROTOCOL_PORT4_INVERSE='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6i' ]; then
            PROTOCOL_PORT6_INVERSE='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

    if [ "${PROTOCOL_PORT4}" -eq '1' ] || [ "${PROTOCOL_PORT6}" -eq '1' ] || \
    [ "${PROTOCOL_PORT4_INVERSE}" -eq '1' ] || [ "${PROTOCOL_PORT6_INVERSE}" -eq '1' ]; then
        DIVIDER="============================================================================="
		HEADER="\n %-5s %-8s %-8s %-8s %-36s\n"
        FORMAT=" %-5s %-8s %-8s %-8s %-36s\n"
        WIDTH="77"
        printf "${HEADER}" "PORT" "IP" "PORT" "TEST" "HOST"
        printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4' ]; then
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
				printf "${FORMAT}" "[*]" "IPv4" "${PORT_NUMBER}" "OPEN" "${HOST}"
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6' ]; then
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
				printf "${FORMAT}" "[*]" "IPv6" "${PORT_NUMBER}" "OPEN" "${HOST}"
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4i' ]; then
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
				printf "${FORMAT}" "[*]" "IPv4" "${PORT_NUMBER}" "CLOSED" "${HOST}"
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6i' ]; then
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
				printf "${FORMAT}" "[*]" "IPv6" "${PORT_NUMBER}" "CLOSED" "${HOST}"
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_http_list() {
	PROTOCOL_HTTP4='0'
    PROTOCOL_HTTP6='0'
    PROTOCOL_HTTPS4='0'
    PROTOCOL_HTTPS6='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'http4' ]; then
            PROTOCOL_HTTP4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'http6' ]; then
            PROTOCOL_HTTP6='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'https4' ]; then
            PROTOCOL_HTTPS4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'https6' ]; then
            PROTOCOL_HTTPS6='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_HTTP4}" -eq '1' ] || [ "${PROTOCOL_HTTP6}" -eq '1' ] || \
	[ "${PROTOCOL_HTTPS4}" -eq '1' ] || [ "${PROTOCOL_HTTPS6}" -eq '1' ]; then
        DIVIDER="============================================================================="
        HEADER="\n %-5s %-8s %-8s %-36s\n"
        FORMAT=" %-5s %-8s %-8s %-36s\n"
        WIDTH="77"
        printf "${HEADER}" "HTTP" "IP" "PROTO" "HOST"
        printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        if [ "${PROTOCOL_HTTP4}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'http4' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    printf "${FORMAT}" "[*]" "IPv4" "HTTP" "${DOMAIN_NAME}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_HTTP6}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'http6' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    printf "${FORMAT}" "[*]" "IPv6" "HTTP" "${DOMAIN_NAME}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_HTTPS4}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'https4' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    printf "${FORMAT}" "[*]" "IPv4" "HTTPS" "${DOMAIN_NAME}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_HTTPS6}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'https6' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    printf "${FORMAT}" "[*]" "IPv6" "HTTPS" "${DOMAIN_NAME}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
    fi
}

feature_dns_list() {
	PROTOCOL_DNS_A='0'
    PROTOCOL_DNS_AAAA='0'
	PROTOCOL_DNS_CNAME='0'
    PROTOCOL_DNS_TXT='0'
    PROTOCOL_DNS_MX='0'
    PROTOCOL_DNS_NS='0'
    PROTOCOL_DNS_SOA='0'
    PROTOCOL_DNS_PTR='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'a' ]; then
            PROTOCOL_DNS_A='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'aaaa' ]; then
            PROTOCOL_DNS_AAAA='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'cname' ]; then
            PROTOCOL_DNS_CNAME='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'txt' ]; then
            PROTOCOL_DNS_TXT='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'mx' ]; then
            PROTOCOL_DNS_MX='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ns' ]; then
            PROTOCOL_DNS_NS='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'soa' ]; then
            PROTOCOL_DNS_SOA='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ptr' ]; then
            PROTOCOL_DNS_PTR='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_DNS_A}" -eq '1' ] || [ "${PROTOCOL_DNS_AAAA}" -eq '1' ] || [ "${PROTOCOL_DNS_CNAME}" -eq '1' ] || [ "${PROTOCOL_DNS_TXT}" -eq '1' ] || \
	[ "${PROTOCOL_DNS_MX}" -eq '1' ] || [ "${PROTOCOL_DNS_NS}" -eq '1' ] || [ "${PROTOCOL_DNS_SOA}" -eq '1' ] || [ "${PROTOCOL_DNS_PTR}" -eq '1' ]; then
        DIVIDER="============================================================================="
        HEADER="\n %-5s %-8s %-36s %-36s\n"
        FORMAT=" %-5s %-8s %-36s %-36s\n"
        WIDTH="77"
        printf "${HEADER}" "DNS" "TYPE" "DOMAIN" "ENTRY"
        printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
		if [ "${PROTOCOL_DNS_A}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'a' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "A" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_AAAA}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'aaaa' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "AAAA" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_CNAME}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'cname' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "CNAME" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_TXT}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'txt' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "TXT" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_MX}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'mx' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "MX" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_NS}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'ns' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "NS" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_SOA}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'soa' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "SOA" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_PTR}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'ptr' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    ENTRY="$(echo "${line}" | awk '{print $3;}')"
                    printf "${FORMAT}" "[*]" "PTR" "${DOMAIN_NAME}" "${ENTRY}"
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
    fi
}

feature_tls_list() {
	PROTOCOL_TLS='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'tls' ]; then
            PROTOCOL_TLS='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_TLS}" -eq '1' ]; then
		DIVIDER="============================================================================="
        HEADER="\n %-5s %-36s\n"
        FORMAT=" %-5s %-36s\n"
        WIDTH="77"
		printf "${HEADER}" "DOMAIN NAME"
        printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
		if [ "${PROTOCOL_TLS}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'tls' ]; then
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    printf "${FORMAT}" "[*]" "${DOMAIN_NAME}"
                fi
            done < ${UPTIMEBOT_DATABASE}
		fi
	fi
}

feature_tor_list() {
	printf ''
}

feature_all_list() {
	feature_ping_list
    feature_port_list
	feature_http_list
	feature_dns_list
	feature_tls_list
	#feature_tor_list
}

feature_ping() {
	PROTOCOL_PING='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ping' ]; then
            PROTOCOL_PING='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_PING}" -eq '1' ]; then
        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
            DIVIDER="============================================================================="
            HEADER="\n %-5s %-8s %-8s %-36s\n"
            FORMAT=" %-5s %-8s %-8s %-36s\n"
            WIDTH="77"
            printf "${HEADER}" "PING" "STATUS" "IP" "IP ADDRESS"
            printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        fi
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'ping' ]; then
                slow_down
                IP_ADDRESS="$(echo "${line}" | awk '{print $2;}')"
				check_ip_version "${IP_ADDRESS}"
				if [ "${IP_VERSION}" -eq '4' ]; then
					if ! ping -q -c1 -t2 "${IP_ADDRESS}" > /dev/null 2>&1; then
                        if ! ping -q -c1 -t2 "${IP_ADDRESS}" > /dev/null 2>&1; then
                            send_error_to_log "[PING][IPv4]" "${IP_ADDRESS}"
                            if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                                printf "${FORMAT}" "[!]" "ERROR" "IPv4" "${IP_ADDRESS}"
                            elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                                send_error_to_telegram "[PING][IPv4]" "${IP_ADDRESS}"
                            fi
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "IPv4" "${IP_ADDRESS}"
                        fi
                    fi
                elif [ "${IP_VERSION}" -eq '6' ]; then
					if ! ping6 -q -c1 -t2 "${IP_ADDRESS}" > /dev/null 2>&1; then
                        if ! ping6 -q -c1 -t2 "${IP_ADDRESS}" > /dev/null 2>&1; then
                            send_error_to_log "[PING][IPv6]" "${IP_ADDRESS}"
                            if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                                printf "${FORMAT}" "[!]" "ERROR" "IPv6" "${IP_ADDRESS}"
                            elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                                send_error_to_telegram "[PING][IPv6]" "${IP_ADDRESS}"
                            fi
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "IPv6" "${IP_ADDRESS}"
                        fi
                    fi
				fi
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_port() {
    PROTOCOL_PORT4='0'
    PROTOCOL_PORT6='0'
    PROTOCOL_PORT4_INVERSE='0'
    PROTOCOL_PORT6_INVERSE='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4' ]; then
            PROTOCOL_PORT4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6' ]; then
            PROTOCOL_PORT6='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

    if [ "${PROTOCOL_PORT4}" -eq '1' ] || [ "${PROTOCOL_PORT6}" -eq '1' ] || \
    [ "${PROTOCOL_PORT4_INVERSE}" -eq '1' ] || [ "${PROTOCOL_PORT6_INVERSE}" -eq '1' ]; then
        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
            DIVIDER="============================================================================="
            HEADER="\n %-5s %-8s %-8s %-8s %-36s\n"
            FORMAT=" %-5s %-8s %-8s %-8s %-36s\n"
            WIDTH="77"
            printf "${HEADER}" "PORT" "STATUS" "IP" "NR" "HOST"
            printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        fi
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
                if ! nc -4zw2 "${HOST}" "${PORT_NUMBER}" > /dev/null 2>&1; then
                    send_error_to_log "[PORT][${PORT_NUMBER}][IPv4]" "${HOST}:${PORT_NUMBER}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv4" "${PORT_NUMBER}" "${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[PORT][IPv4]" "${HOST}:${PORT_NUMBER}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv4" "${PORT_NUMBER}" "${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
                if ! nc -6zw2 "${HOST}" "${PORT_NUMBER}" > /dev/null 2>&1; then
                    send_error_to_log "[PORT][${PORT_NUMBER}][IPv6]" "${HOST}:${PORT_NUMBER}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv6" "${PORT_NUMBER}" "${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[PORT][IPv6]" "${HOST}:${PORT_NUMBER}"
                    fi 
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv6" "${PORT_NUMBER}" "${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port4i' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
                if nc -4zw2 "${HOST}" "${PORT_NUMBER}" > /dev/null 2>&1; then
                    send_error_to_log "[PORT][${PORT_NUMBER}][IPv4]" "${HOST}:${PORT_NUMBER}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv4" "${PORT_NUMBER}" "${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[PORT][IPv4]" "${HOST}:${PORT_NUMBER}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv4" "${PORT_NUMBER}" "${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'port6i' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                PORT_NUMBER="$(echo "${line}" | awk '{print $3;}')"
                if nc -6zw2 "${HOST}" "${PORT_NUMBER}" > /dev/null 2>&1; then
                    send_error_to_log "[PORT][${PORT_NUMBER}][IPv6]" "${HOST}:${PORT_NUMBER}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv6" "${PORT_NUMBER}" "${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[PORT][IPv6]" "${HOST}:${PORT_NUMBER}"
                    fi 
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv6" "${PORT_NUMBER}" "${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_http() {
    # requires curl
    requirement_curl

	PROTOCOL_HTTP4='0'
    PROTOCOL_HTTP6='0'
    PROTOCOL_HTTPS4='0'
    PROTOCOL_HTTPS6='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'http4' ]; then
            PROTOCOL_HTTP4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'http6' ]; then
            PROTOCOL_HTTP6='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'https4' ]; then
            PROTOCOL_HTTPS4='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'https6' ]; then
            PROTOCOL_HTTPS6='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_HTTP4}" -eq '1' ] || [ "${PROTOCOL_HTTP6}" -eq '1' ] || \
	[ "${PROTOCOL_HTTPS4}" -eq '1' ] || [ "${PROTOCOL_HTTPS6}" -eq '1' ]; then
        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
            DIVIDER="============================================================================="
            HEADER="\n %-5s %-8s %-8s %-36s\n"
            FORMAT=" %-5s %-8s %-8s %-36s\n"
            WIDTH="77"
            printf "${HEADER}" "HTTP" "STATUS" "IP" "HOST"
            printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        fi
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'http4' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                if !  curl -I -4 "${HOST}" 2>&1 | grep -w "200 OK\|301 Moved Permanently" > /dev/null; then
                    send_error_to_log "[HTTP][IPv4]" "http://${HOST}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv4" "http://${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[HTTP][IPv4]" "http://${HOST}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv4" "http://${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'http6' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                if !  curl -I -6 "${HOST}" 2>&1 | grep -w "200 OK\|301 Moved Permanently" > /dev/null; then
                    send_error_to_log "[HTTP][IPv6]" "http://${HOST}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv6" "http://${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[HTTP][IPv6]" "http://${HOST}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv6" "http://${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'https4' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                if !  curl -I -4 "${HOST}" 2>&1 | grep -w "200 OK\|301 Moved Permanently" > /dev/null; then
                    send_error_to_log "[HTTPS][IPv4]" "https://${HOST}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv4" "https://${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[HTTPS][IPv4]" "https://${HOST}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv4" "https://${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'https6' ]; then
                slow_down
                HOST="$(echo "${line}" | awk '{print $2;}')"
                if !  curl -I -6 "${HOST}" 2>&1 | grep -w "200 OK\|301 Moved Permanently" > /dev/null; then
                    send_error_to_log "[HTTPS][IPv6]" "https://${HOST}"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "IPv6" "https://${HOST}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[HTTPS][IPv6]" "https://${HOST}"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "IPv6" "https://${HOST}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_dns() {
	PROTOCOL_DNS_A='0'
    PROTOCOL_DNS_AAAA='0'
	PROTOCOL_DNS_CNAME='0'
    PROTOCOL_DNS_TXT='0'
    PROTOCOL_DNS_MX='0'
    PROTOCOL_DNS_NS='0'
    PROTOCOL_DNS_SOA='0'
    PROTOCOL_DNS_PTR='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'a' ]; then
            PROTOCOL_DNS_A='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'aaaa' ]; then
            PROTOCOL_DNS_AAAA='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'cname' ]; then
            PROTOCOL_DNS_CNAME='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'txt' ]; then
            PROTOCOL_DNS_TXT='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'mx' ]; then
            PROTOCOL_DNS_MX='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ns' ]; then
            PROTOCOL_DNS_NS='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'soa' ]; then
            PROTOCOL_DNS_SOA='1'
        fi
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'ptr' ]; then
            PROTOCOL_DNS_PTR='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_DNS_A}" -eq '1' ] || [ "${PROTOCOL_DNS_AAAA}" -eq '1' ] || [ "${PROTOCOL_DNS_CNAME}" -eq '1' ] || [ "${PROTOCOL_DNS_TXT}" -eq '1' ] || \
	[ "${PROTOCOL_DNS_MX}" -eq '1' ] || [ "${PROTOCOL_DNS_NS}" -eq '1' ] || [ "${PROTOCOL_DNS_SOA}" -eq '1' ] || [ "${PROTOCOL_DNS_PTR}" -eq '1' ]; then
        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
            DIVIDER="============================================================================="
            HEADER="\n %-5s %-8s %-8s %-36s %-20s\n"
            FORMAT=" %-5s %-8s %-8s %-36s %-20s\n"
            WIDTH="77"
            printf "${HEADER}" "DNS" "STATUS" "TYPE" "DOMAIN" "DNS CHECK"
            printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        fi
		if [ "${PROTOCOL_DNS_A}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'a' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t a "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][A]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "A" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][A]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "A" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_AAAA}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'aaaa' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t aaaa "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][AAAA]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "AAAA" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][AAAA]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "AAAA" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_CNAME}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'cname' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t cname "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][CNAME]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "CNAME" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][CNAME]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "CNAME" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_TXT}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'txt' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t txt "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][TXT]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "TXT" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][TXT]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "TXT" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_MX}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'mx' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t mx "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][MX]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "MX" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][MX]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "MX" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_NS}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'ns' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t ns "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][NS]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "NS" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][NS]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "NS" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_SOA}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'soa' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t soa "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][SOA]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "SOA" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][SOA]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "SOA" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
        if [ "${PROTOCOL_DNS_PTR}" -eq '1' ]; then
            while read -r line; do
                if [ "$(echo "${line}" | awk '{print $1;}')" = 'ptr' ]; then
                    slow_down
                    DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                    DNS_CHECK="$(echo "${line}" | awk '{print $3;}')"
                    if ! host -t ptr "${DOMAIN_NAME}" 2>&1 | grep "${DNS_CHECK}" > /dev/null; then
                        send_error_to_log "[DNS][PTR]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[!]" "ERROR" "PTR" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                            send_error_to_telegram "[DNS][PTR]" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    else
                        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                            printf "${FORMAT}" "[i]" "OK" "PTR" "${DOMAIN_NAME}" "${DNS_CHECK}"
                        fi
                    fi
                fi
            done < ${UPTIMEBOT_DATABASE}
        fi
    fi
}

feature_tls() {
    # requires curl
    requirement_curl

	PROTOCOL_TLS='0'

	while read -r line; do
        if [ "$(echo "${line}" | awk '{print $1;}')" = 'tls' ]; then
            PROTOCOL_TLS='1'
        fi
    done < ${UPTIMEBOT_DATABASE}

	if [ "${PROTOCOL_TLS}" -eq '1' ]; then
        if [ "${ARGUMENT_CLI}" -eq '1' ]; then
            DIVIDER="============================================================================="
            HEADER="\n %-5s %-8s %-8s %-36s\n"
            FORMAT=" %-5s %-8s %-8s %-36s\n"
            WIDTH="77"
            printf "${HEADER}" "TLS" "STATUS" "DAYS" "DOMAIN" 
            printf "%${WIDTH}.${WIDTH}s\n" "${DIVIDER}"
        fi
        while read -r line; do
            if [ "$(echo "${line}" | awk '{print $1;}')" = 'tls' ]; then
                slow_down
                DOMAIN_NAME="$(echo "${line}" | awk '{print $2;}')"
                TLS_EXPIRATION_RAW="$(curl -vI --insecure --stderr - https://${DOMAIN_NAME} | grep "expire date" | sed 's/*//g' | sed 's/expire date: //g')"
                TLS_EXPIRATION_TIME="$(echo "${TLS_EXPIRATION_RAW}" | awk '{print $3;}')"
                TLS_EXPIRATION_DAY="$(echo "${TLS_EXPIRATION_RAW}" | awk '{print $2;}')"
                TLS_EXPIRATION_MONTH="$(echo "${TLS_EXPIRATION_RAW}" | awk '{print $1;}')"
                TLS_EXPIRATION_YEAR="$(echo "${TLS_EXPIRATION_RAW}" | awk '{print $4;}')"
                TLS_EXPIRATION_EPOCH="$(date -j -f "%d %b %T %Y" "${TLS_EXPIRATION_DAY} ${TLS_EXPIRATION_MONTH} ${TLS_EXPIRATION_TIME} ${TLS_EXPIRATION_YEAR}" +"%s")"
                CURRENT_EPOCH="$(date "+%s")"
                REMAINING_TIME_SECONDS="$(( TLS_EXPIRATION_EPOCH - CURRENT_EPOCH ))"
                REMAINING_TIME_DAYS="$(( REMAINING_TIME_SECONDS / 3600 / 24 ))"
                if [ "${REMAINING_TIME_DAYS}" -lt '0' ]; then
                    send_error_to_log "[TLS][EXPIRATION]" "${DOMAIN_NAME}" "expired in ${REMAINING_TIME_DAYS} days"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "ERROR" "${REMAINING_TIME_DAYS}" "${DOMAIN_NAME}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[TLS][EXPIRATION]" "${DOMAIN_NAME}" "expired in ${REMAINING_TIME_DAYS} days"
                    fi
                elif [ "${REMAINING_TIME_DAYS}" -le "${UPTIMEBOT_TLS_ALERT}" ]; then
                    send_error_to_log "[TLS][EXPIRATION]" "${DOMAIN_NAME}" "in ${REMAINING_TIME_DAYS} days"
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[!]" "NOTICE" "${REMAINING_TIME_DAYS}" "${DOMAIN_NAME}"
                    elif [ "${ARGUMENT_TELEGRAM}" -eq '1' ]; then
                        send_error_to_telegram "[TLS][EXPIRATION]" "${DOMAIN_NAME}" "expires in ${REMAINING_TIME_DAYS} days"
                    fi
                else
                    if [ "${ARGUMENT_CLI}" -eq '1' ]; then
                        printf "${FORMAT}" "[i]" "OK" "${REMAINING_TIME_DAYS}" "${DOMAIN_NAME}"
                    fi
                fi
            fi
        done < ${UPTIMEBOT_DATABASE}
    fi
}

feature_tor() {
	echo ''
}

feature_all() {
	feature_ping
    feature_port
    feature_http
    feature_dns
    feature_tls
    #feature_tor_cli
}

####################################################################################################
# METHOD FUNCTIONS
####################################################################################################

method_telegram() {
    # requires curl
    requirement_curl
    if [ "${METHOD_TELEGRAM}" = '1' ]; then
        TELEGRAM_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"

        # create payload for Telegram
        TELEGRAM_PAYLOAD="chat_id=${TELEGRAM_CHAT}&text=${TELEGRAM_MESSAGE}&parse_mode=HTML&disable_web_page_preview=true"

        # sent payload to Telegram API and exit
        curl --silent --max-time 10 --retry 5 --retry-delay 2 --retry-max-time 10 -d "${TELEGRAM_PAYLOAD}" "${TELEGRAM_URL}" > /dev/null 2>&1 &
    else
        error_telegram_not_configured
    fi
}

####################################################################################################
# MAIN FUNCTIONS
####################################################################################################

uptimebot_main() {
    # validate arguments
    uptimebot_argument_validate

    # when both a feature and method cli are given
	if [ "${ARGUMENT_PING}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_ping_list
    elif [ "${ARGUMENT_PING}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_ping
    elif [ "${ARGUMENT_PING}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_ping
    elif [ "${ARGUMENT_PING}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_ping
    elif [ "${ARGUMENT_PORT}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_port_list
    elif [ "${ARGUMENT_PORT}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_port
    elif [ "${ARGUMENT_PORT}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_port
    elif [ "${ARGUMENT_PORT}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_port
    elif [ "${ARGUMENT_HTTP}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_http_list
    elif [ "${ARGUMENT_HTTP}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_http
    elif [ "${ARGUMENT_HTTP}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_http
    elif [ "${ARGUMENT_HTTP}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_http
    elif [ "${ARGUMENT_DNS}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_dns_list
    elif [ "${ARGUMENT_DNS}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_dns
    elif [ "${ARGUMENT_DNS}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_dns
    elif [ "${ARGUMENT_DNS}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_dns
    elif [ "${ARGUMENT_TLS}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_tls_list
    elif [ "${ARGUMENT_TLS}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_tls
    elif [ "${ARGUMENT_TLS}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_tls
    elif [ "${ARGUMENT_TLS}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_tls
    elif [ "${ARGUMENT_TOR}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_tor_list
    elif [ "${ARGUMENT_TOR}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_tor
    elif [ "${ARGUMENT_TOR}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_tor
    elif [ "${ARGUMENT_TOR}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_tor
    elif [ "${ARGUMENT_ALL}" = '1' ] && [ "${ARGUMENT_LIST}" = '1' ]; then
		feature_all_list
    elif [ "${ARGUMENT_ALL}" = '1' ] && [ "${ARGUMENT_LOG}" = '1' ]; then
        feature_all
    elif [ "${ARGUMENT_ALL}" = '1' ] && [ "${ARGUMENT_CLI}" = '1' ]; then
        feature_all
    elif [ "${ARGUMENT_ALL}" = '1' ] && [ "${ARGUMENT_TELEGRAM}" = '1' ]; then
		feature_all
    # method list is the default method, so even when no method is given method list is used
	elif [ "${ARGUMENT_PING}" = '1' ]; then
        feature_ping_list
    elif [ "${ARGUMENT_PORT}" = '1' ]; then
        feature_port_list
	elif [ "${ARGUMENT_HTTP}" = '1' ]; then
        feature_http_list
	elif [ "${ARGUMENT_DNS}" = '1' ]; then
        feature_dns_list
	elif [ "${ARGUMENT_TLS}" = '1' ]; then
        feature_tls_list
	elif [ "${ARGUMENT_TOR}" = '1' ]; then
        feature_tor_list
	# options can not be used with a method or feature
    elif [ "${ARGUMENT_CHECK}" = '1' ]; then
        option_check
    elif [ "${ARGUMENT_CRON}" = '1' ]; then
        option_cron
    elif [ "${ARGUMENT_VERSION}" = '1' ]; then
        option_version
    elif [ "${ARGUMENT_HELP}" = '1' ]; then
        option_help
    # the overview is shown when no arguments were given
    else
        feature_all_list
    fi
}

####################################################################################################
# CALL MAIN FUNCTION
####################################################################################################

uptimebot_main
